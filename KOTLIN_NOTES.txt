fun main() {
    val hashSet = hashSetOf<People>()
    
    val pizdos1 = People("Ivan", 26)
    val pizdos2 = People("Ivan", 26)
    
    hashSet.add(pizdos1)
    hashSet.add(pizdos2)
    
    println(hashSet.size)
}

data class People(val name: String, val age: Int)  // 2 для просто класса, 1 для data

// поинт здесь следующий - котлин под капотом генерит hashCode() equals() для класса, которые используются для правильной работы коллекции 
// т.е есть == он же equals, и он проверит structural equality объектов, а не просто равенство ссылок (для этого используется оператор ===)
// ну и дефолтная реализация structural equality возьмет все поля в primary constructor класса, поэтому все отработает как надо
// для справки - hashmap просто перезапишет значение с одинаковыми ключами, а hashset не даст вставить вроде прямо


Debounce

Штука в coroutines.flow, типа как фильтр, отсеивает события идущие чаще, чем timeout установленный


Test overspecification

Может стрельнуть в ногу для сравнения data классов
Решается соавнением только важных полей, а не всех


Lambda kotlin

someMethod(init: SomeApi.() -> Unit)
Это лямбда с обработчиком называется


Dsl

Язык для более синт сахарного использования в вызывающем коде
Юзался в ui тестах для создания мокированного ответа с бека
Сюда же лямбда с обработчиком method.(), Extensions, infix методы one to "1"


Data class

Ну в общем toString(), hashCode(), equals() генерятся сами для протерти дата класса в первичном конструкторе. Но проверка на равенство идет через проверку ссылки, поэтому для корректной работы надо переопределять


Reified kotlin

Про стирание типов в runtime для gemerics связано
Позволяет сохранить тип от стирания


Inline kotlin

Повышение производительности для лямбд, встроит её код вместо создания анонимного класса
Noinline можно хранить внутри полей класса и тд, inline - нет, и сам метод принимающий такую онлайн метод должен быть помечен модификатором inline


Infix kotlin

Это синтаксический сахар, типа map (1 to "one", 2 to "two") и тд
Dsl кароче


Kotlin modifiers

Public - default
Internal внутри модуля только видно (похоже на package default в java, но чуть расширено)
Protected приват + потомки
Private


Sealed class

Сущность для блокирования наследования определённым списком наследников. Есть в java c 17
В котле все наследники известны на compile time, если добавить нового то не скомпилится даже
Есть общее с enum, но там только один инстанс может быть, а sealed class много одного типа потомка объектов
В котле sealed class - абстрактный


Kotline moments

Нельзя унаследовать data class от другогл


Operator overloading kotlin

operator fun get()
UnaryPlus это перегрузим поведение для "+" символа


() -> blabla

3 контекста в котлине
Лямбда и её параметры, с телом метода
В when выражении
При указании functionType (a, b) -> Int


verifyOrder() vs verifySequence()

Первый прлверчет, что все вызовы методов мока произошли и в том порядке. Второй, что ничего другого дополнительно не вызывалось, кроме этих


Ternary kotlin

Не работает классический джавовый тернарный оператор, тк можно написать if (a) b else c


Kotlin mockk

confirmVerified(), для проверки покрытия verify на моках
coEvery {} / coVerify { }
runTest { }


Coroutines moment

Launch дефолтный идёт на main thread
Надо диспетчер IO приюописывать


Kt class(var blah)

Конструктор обычного класса указывается после имени Person(val name:String, ...)
А в data классе это же будут проперти класса, с геттерами и сеттерами, и они же private как правило


Object Utils { }

Это анонимный класс синглтон в котлине
Его методы если помечены @JvmStatic, то они же статиками будут. Кароче статический класс


By lazy Kotlin

Блок отложенной инициализации (лямбда будет выполнена один раз при обращении к переменной, далее возвращаться вычисленный результат)


Object Utils { }

Это анонимный класс синглтон в котлине
Его методы если помечены @JvmStatic, то они же статиками будут. Кароче статический класс


Java kotlin test

Язык теста и проверяемого класса должны быть одинаковыми
Следовательно базаем тесты и осн классы на java, чтобы не обосраться с какими нибудь подводными kotlin moments


Kotlin object

Это анонимный класс как в джаве
И это же паттерн синглтон


Kt

Infix
Inline
Reified


Primary constr nuance

Есть разница между
class Person(name: Strong)
class Person(var name: Strong)
В последнем случае доступ будет как к полю в классе. Иначе только в init, или в иниц других переменных. В моём кейсе var modifier понадобился для доступа из метода


Rx notes

.map для преобразований с данными типа конвертера (на back потоке)
Синтаксис сеттинга результата в Livedata только такой верный: mWeatherData::setValue
Все под капотом само сделается. Если делать mWeatherLiveData.value = weeklyWeather ошибка не будет приходить в throwable


Rx progress bar

Удобно, делается через
doOnSubscribe()
doAfterTerminate()


Kt vs Java anon

Удобнее, чем в джаве, меньше мусора
val observer = object : CompletableObserver {
override method() {}
}
CompletableObserver observer = new CompletableObserver() {
Override bla blah
});


Проверка строки на числа

Удобный готовый метод isDigitOnly() из коробки
Позволяет при обработке формы editText красиво возвращать данные либо заглушку


Kotlin Structural equality

== транслируется в
а?.equals(b) ?: (b === null)
=== это равенство по ссылке (== из java)


Kt loops

Циклы kotlin
https://www.baeldung.com/kotlin/loops


Kotlin collections

Ну да есть mutable [mutableListOf()] и read-only [listOf()] версии
При этом var val не надо путать
Есть emptyList() вариации
Начинаются с iterable также


Kt Any Unit Nothing

Any типа Object 3 метода всего содержит
Unit типа void, можно функцию c printLn() без модификатора void или unit сделать и норм. В java наебнулось бы на компиляции
Nothing тип если метод не отработает, типа цикл или исключение бросаем. Наследник всех типов, т.е. можем вернуть наш тип List<Data> после Todo(), который с исключением выдаёт Nothing. Якобы наши типы родители для Nothing


Scope functions kt

(Let apply) with run also
Позволяют вызывать функции на объекте без повтора его имени


Extensions kt

Можно добавить метод к классу без наследования
Типа: Int.multiply(cnt: Int) { it * cnt }
Потом можно будет вызвать 5.multiply(3)


Java 2 Kt conv constr err

Когда исходный listener свой в recyclerView был на Java, потом конвертнули через Ide на Kt, интерфейс стал красным
Помогло object : TextWatcher перед импелемент сделать
Logic ops Kt

and full, && lazy
& отсутствует


Companion classname

Intent kt: OtherActivity::class.java
Companion obj при получении class name через javaClass.simpleName всегда свой объект возвращает. Поэтому статик метод для логов сделать не удалось, пришлось дублировать его в каждой активити.


Kotlin moments [2]

Без запятых, будто Python с Java скрестили
Есть файлы kt, есть классы
Первые тупа main метод, без класса работает
Вторые класс как в java
?. Safe call
?: Elvis
!! NotNull
Type? nullable / notNull


Kotlin moments [1]

Компилится из строки также как java.
kotlinc file.kt
kotlin filekt
Jar cr: kotlinc hello.kt -include-runtime -d hello.jar
Jar rn: java -jar file.jar
Есть интеракт консоль как в python


Работа в сосноли такая же как и в случае с Java.

Компилим: kotlinc file.kt
Запускаем: kotlin filekt
Jar create: kotlinc hello.kt -include-runtime -d hello.jar
Jar run: java -jar file.jar (джарник норм запускается на исполнение в cli, но кликом в винде не хочет)

Появилась возможность работы в интерактивном режиме как в Петухоне.